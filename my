{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "подключить\tconnect\n",
    "получить  get\n",
    "удалить  delete\n",
    "запросить  request\n",
    "существующий  existing\n",
    "сущность  entity\n",
    "поставщиков  of providers\n",
    "ячейка  cell\n",
    "конвертировать  convert\n",
    "изменить  change\n",
    "местоположение  location\n",
    "часовой пояс   time zone\n",
    "текущая база  current base\n",
    "обновить   update \n",
    "подключиться  connect\n",
    "несколько  multiple\n",
    "ограничить limit\n",
    "авторизация  authorization\n",
    "вход в систему   log in\n",
    "выход из системы  log out\n",
    "отступ  indent\n",
    "тот же  same\n",
    "место  place"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = 17 #not\n",
    "b = 18.0 #not\n",
    "line = 'string' #not\n",
    "my_bool = True #not\n",
    "lst = [] #yep\n",
    "my_dict = {} #словарь yep\n",
    "my_tuple = () #кортеж not\n",
    "my_set = set() #множество #not\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4389215760 4389216488\n",
      "4389216488 4389215760\n",
      "4389216488 4389215760 4389215760 4389215760 4389215760\n",
      "False True True False True False\n"
     ]
    }
   ],
   "source": [
    "# BOOL\n",
    "q = True\n",
    "w = False\n",
    "print(id(q), id(w))\n",
    "q = False\n",
    "w = True\n",
    "print(id(q), id(w))\n",
    "e = True\n",
    "r = True\n",
    "print(id(q), id(w), id(e) , id(r), id(True))\n",
    "print(bool(0), bool(''), bool(None), bool(1), bool(-1), bool('1'))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n",
      "360\n"
     ]
    }
   ],
   "source": [
    "type(int) \n",
    "type(float)\n",
    "a = 10\n",
    "b = 30.0\n",
    "bin_str = '101101000'\n",
    "print(round(10 // 3))\n",
    "print(int(bin_str, 2))\n",
    "print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "String{x} Преобразует первый символ в верхний регистр\n",
      "string{x} Преобразует строку в нижний регистр\n",
      "String{x}  Возвращает центрированную строку\n",
      "0 Возвращает количество раз, когда указанное значение встречается в строке\n",
      "b'String{x}' Возвращает кодированную версию строки\n",
      "False Возвращает true, если строка заканчивается указанным значением\n",
      "String{x} Устанавливает размер табуляции строки\n",
      "2 Ищет в строке указанное значение и возвращает позицию, где оно было найдено\n",
      "String4 Форматирует указанные значения в строку\n",
      "String4 Форматирует указанные значения в строке\n",
      "3 Ищет в строке указанное значение и возвращает позицию, где оно было найдено\n",
      "False Возвращает True, если все символы в строке буквенно-цифровые\n",
      "False Возвращает True, если все символы в строке являются алфавитными\n",
      "True Возвращает True, если все символы в строке являются символами ascii\n",
      "False Возвращает True, если все символы в строке являются десятичными знаками\n",
      "False Возвращает True, если все символы в строке являются цифрами\n",
      "False Возвращает True, если строка является идентификатором\n",
      "False Возвращает True, если все символы в строке имеют нижний регистр\n",
      "False Возвращает True, если все символы в строке являются числовыми\n",
      "True Возвращает True, если все символы в строке пригодны для печати\n",
      "False Возвращает True, если все символы в строке являются пробелами\n",
      "False Возвращает True, если строка соответствует правилам заголовка\n",
      "False Возвращает True, если все символы в строке в верхнем регистре\n",
      "aString{x}b Преобразует элементы итерабельной строки в строку\n",
      "String{x}  Возвращает выровненную по левому краю версию строки\n",
      "string{x} Преобразует строку в нижний регистр\n",
      "String{x} Возвращает обрезанную слева версию строки\n",
      "{115: 112} Возвращает таблицу перевода для использования в переводах\n",
      "('String{x}', '', '') Возвращает кортеж, в котором строка разделена на три части\n",
      "Saaing{x} Возвращает строку, в которой указанное значение заменяется на указанное значение\n",
      "3 Ищет в строке указанное значение и возвращает последнюю позицию, где оно было найдено\n",
      "4 Ищет в строке указанное значение и возвращает последнюю позицию, где оно было найдено\n",
      " String{x} Возвращает выровненную по правому краю версию строки\n",
      "('', '', 'String{x}') Возвращает кортеж, в котором строка разделена на три части\n",
      "['S', 'ring{x}'] Разделяет строку на указанный разделитель и возвращает список\n",
      "String{x} Возвращает обрезанную справа версию строки\n",
      "['String{x}'] Разделяет строку по указанному разделителю и возвращает список\n",
      "['String{x}'] Разделяет строку на разрывы строк и возвращает список\n",
      "False Возвращает true, если строка начинается с указанного значения\n",
      "String{x} Возвращает обрезанную версию строки\n",
      "sTRING{X} Меняет регистры, нижний регистр становится верхним и наоборот\n",
      "String{X} Преобразует первый символ каждого слова в верхний регистр\n",
      "String{x} Возвращает переведенную строку\n",
      "STRING{X} Преобразует строку в верхний регистр\n",
      "0String{x} Заполняет строку заданным количеством значений 0 в начале\n"
     ]
    }
   ],
   "source": [
    "string = 'String{x}'\n",
    "print(string.capitalize(),                 'Преобразует первый символ в верхний регистр')\n",
    "print(string.casefold(),                   'Преобразует строку в нижний регистр')\n",
    "print(string.center(5),                    'Возвращает центрированную строку')\n",
    "print(string.count('s'),                   'Возвращает количество раз, когда указанное значение встречается в строке')\n",
    "print(string.encode(),                     'Возвращает кодированную версию строки')\n",
    "print(string.endswith('g'),                'Возвращает true, если строка заканчивается указанным значением')\n",
    "print(string.expandtabs(1),                'Устанавливает размер табуляции строки')\n",
    "print(string.find('r'),                    'Ищет в строке указанное значение и возвращает позицию, где оно было найдено')\n",
    "print(string.format(x='4'),                'Форматирует указанные значения в строку')\n",
    "print(string.format_map({'x':4}),          'Форматирует указанные значения в строке')\n",
    "print(string.index('i'),                   'Ищет в строке указанное значение и возвращает позицию, где оно было найдено')\n",
    "print(string.isalnum(),                    'Возвращает True, если все символы в строке буквенно-цифровые')\n",
    "print(string.isalpha(),                    'Возвращает True, если все символы в строке являются алфавитными')\n",
    "print(string.isascii(),                    'Возвращает True, если все символы в строке являются символами ascii')\n",
    "print(string.isdecimal(),                  'Возвращает True, если все символы в строке являются десятичными знаками')\n",
    "print(string.isdigit(),                    'Возвращает True, если все символы в строке являются цифрами')\n",
    "print(string.isidentifier(),               'Возвращает True, если строка является идентификатором')\n",
    "print(string.islower(),                    'Возвращает True, если все символы в строке имеют нижний регистр')\n",
    "print(string.isnumeric(),                  'Возвращает True, если все символы в строке являются числовыми')\n",
    "print(string.isprintable(),                'Возвращает True, если все символы в строке пригодны для печати')\n",
    "print(string.isspace(),                    'Возвращает True, если все символы в строке являются пробелами')\n",
    "print(string.istitle(),                    'Возвращает True, если строка соответствует правилам заголовка')\n",
    "print(string.isupper(),                    'Возвращает True, если все символы в строке в верхнем регистре')\n",
    "print(string.join(['a','b']),              'Преобразует элементы итерабельной строки в строку')\n",
    "print(string.ljust(10),                    'Возвращает выровненную по левому краю версию строки')\n",
    "print(string.lower(),                      'Преобразует строку в нижний регистр')\n",
    "print(string.lstrip(),                     'Возвращает обрезанную слева версию строки')\n",
    "print(string.maketrans('s', 'p'),          'Возвращает таблицу перевода для использования в переводах')\n",
    "print(string.partition('.'),               'Возвращает кортеж, в котором строка разделена на три части')\n",
    "print(string.replace('tr', 'aa'),          'Возвращает строку, в которой указанное значение заменяется на указанное значение')\n",
    "print(string.rfind('i'),                   'Ищет в строке указанное значение и возвращает последнюю позицию, где оно было найдено')\n",
    "print(string.rindex('n'),                  'Ищет в строке указанное значение и возвращает последнюю позицию, где оно было найдено')\n",
    "print(string.rjust(10),                    'Возвращает выровненную по правому краю версию строки')\n",
    "print(string.rpartition('.'),              'Возвращает кортеж, в котором строка разделена на три части')\n",
    "print(string.rsplit('t'),                  'Разделяет строку на указанный разделитель и возвращает список')\n",
    "print(string.rstrip(),                     'Возвращает обрезанную справа версию строки')\n",
    "print(string.split(),                      'Разделяет строку по указанному разделителю и возвращает список')\n",
    "print(string.splitlines(),                 'Разделяет строку на разрывы строк и возвращает список')\n",
    "print(string.startswith('s'),              'Возвращает true, если строка начинается с указанного значения')\n",
    "print(string.strip(),                      'Возвращает обрезанную версию строки')\n",
    "print(string.swapcase(),                   'Меняет регистры, нижний регистр становится верхним и наоборот')\n",
    "print(string.title(),                      'Преобразует первый символ каждого слова в верхний регистр')\n",
    "print(string.translate({'r':'o'}),         'Возвращает переведенную строку')\n",
    "print(string.upper(),                      'Преобразует строку в верхний регистр')\n",
    "print(string.zfill(10),                    'Заполняет строку заданным количеством значений 0 в начале')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None Добавляет элемент в конец списка\n",
      "['green', 'red', 'orange', 'blue', 'pink'] Возвращает копию списка\n",
      "1 Возвращает количество элементов с заданным значением\n",
      "None Добавляет элементы списка (или любой итерабельной таблицы) в конец текущего списка\n",
      "2 Возвращает индекс первого элемента с указанным значением\n",
      "None Добавляет элемент в указанную позицию\n",
      "indigo Удаляет элемент в указанной позиции\n",
      "None Удаляет первый элемент с указанным значением\n",
      "None Меняет порядок следования списка\n",
      "['new_color2', 'new color', 'pink', 'blue', 'orange', 'green']\n",
      "None Сортирует список\n",
      "['blue', 'green', 'new color', 'new_color2', 'orange', 'pink']\n",
      "None Удаляет все элементы из списка\n",
      "[]\n"
     ]
    }
   ],
   "source": [
    "my_list = ['green', 'red', 'orange', 'blue']\n",
    "print(my_list.append('pink'), 'Добавляет элемент в конец списка')\n",
    "print(my_list.copy(), 'Возвращает копию списка')\n",
    "print(my_list.count('red'), 'Возвращает количество элементов с заданным значением')\n",
    "print(my_list.extend(['new color', 'new_color2']), 'Добавляет элементы списка (или любой итерабельной таблицы) в конец текущего списка')\n",
    "print(my_list.index('orange'), 'Возвращает индекс первого элемента с указанным значением')\n",
    "print(my_list.insert(2, 'indigo'), 'Добавляет элемент в указанную позицию')\n",
    "print(my_list.pop(2), 'Удаляет элемент в указанной позиции')\n",
    "print(my_list.remove('red'), 'Удаляет первый элемент с указанным значением')\n",
    "print(my_list.reverse(), 'Меняет порядок следования списка')\n",
    "print(my_list)\n",
    "print(my_list.sort(), 'Сортирует список')\n",
    "print(my_list)\n",
    "print(my_list.clear(), 'Удаляет все элементы из списка')\n",
    "print(my_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1: 'one', '2': 'two', '': 1} Возвращает копию словаря\n",
      "{1: [1, 2], 2: [1, 2], 3: [1, 2]} Возвращает словарь с указанными ключами и значением\n",
      "two Возвращает значение указанного ключа\n",
      "dict_items([(1, 'one'), ('2', 'two'), ('', 1)]) Возвращает список, содержащий кортеж для каждой пары ключ-значение\n",
      "dict_keys([1, '2', '']) Возвращает список, содержащий ключи словаря\n",
      "1 Удаляет элемент с указанным ключом\n",
      "('2', 'two') Удаляет последнюю вставленную пару ключ-значение\n",
      "one Возвращает значение указанного ключа. Если ключ не существует: вставляет ключ с указанным значением\n",
      "None Обновляет словарь указанными парами ключ-значение\n",
      "dict_values(['one', 2]) Возвращает список всех значений в словаре\n",
      "{1: 'one', 'two': 2}\n",
      "None Удаляет все элементы из словаря\n",
      "{}\n"
     ]
    }
   ],
   "source": [
    "my_dict = {1:'one', '2':'two', '':1}\n",
    "print(my_dict.copy(),  'Возвращает копию словаря')\n",
    "print(my_dict.fromkeys([1, 2, 3], [1, 2]),  'Возвращает словарь с указанными ключами и значением')\n",
    "print(my_dict.get('2'),  'Возвращает значение указанного ключа')\n",
    "print(my_dict.items(),  'Возвращает список, содержащий кортеж для каждой пары ключ-значение')\n",
    "print(my_dict.keys(),  'Возвращает список, содержащий ключи словаря')\n",
    "print(my_dict.pop(''),  'Удаляет элемент с указанным ключом')\n",
    "print(my_dict.popitem(),  'Удаляет последнюю вставленную пару ключ-значение')\n",
    "print(my_dict.setdefault(1),  'Возвращает значение указанного ключа. Если ключ не существует: вставляет ключ с указанным значением')\n",
    "print(my_dict.update({'two':2}),  'Обновляет словарь указанными парами ключ-значение')\n",
    "print(my_dict.values(),  'Возвращает список всех значений в словаре')\n",
    "print(my_dict)\n",
    "print(my_dict.clear(),  'Удаляет все элементы из словаря')\n",
    "print(my_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4 Возвращает количество раз, когда указанное значение встречается в кортеже\n",
      "3 Ищет в кортеже указанное значение и возвращает позицию, в которой оно было найдено\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_tuple = ('chair', 'table', 'sofa', 'bed', 'chair', 'stool', 1, 5, 'bed', 'bed', 'bed')\n",
    "print(my_tuple.count('bed'), 'Возвращает количество раз, когда указанное значение встречается в кортеже')\n",
    "print(my_tuple.index('bed'), 'Ищет в кортеже указанное значение и возвращает позицию, в которой оно было найдено')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'set'>\n",
      "None Добавляет элемент в набор\n",
      "{1, 1.5, 'new_elem', 'Bed', 'table', 'sofa', 'bed', 'chair', 'Sofa'} Возвращает копию множества\n",
      "{'new_elem', 'Bed', 'table', 'sofa', 'bed', 'chair', 'Sofa'} Возвращает набор, содержащий разницу между двумя или более наборами\n",
      "None Удаляет элементы из этого множества, которые также входят в другое, указанное множество\n",
      "None Удаляет указанный элемент\n",
      "{'chair'} Возвращает множество, являющееся пересечением двух или более множеств\n",
      "None Удаляет элементы из этого множества, которые отсутствуют в других, указанных множествах\n",
      "False Возвращает, имеют ли два множества пересечение или нет\n",
      "True Возвращает, содержит ли другое множество данное множество или нет\n",
      "False Возвращает, содержит ли данное множество другое множество или нет\n",
      "sofa Удаляет элемент из множества\n",
      "{'bed', 'chair'}\n",
      "None Удаляет указанный элемент\n",
      "{1, 1.5, 'Bed', 'Sofa', 'bed', 'chair'} Возвращает множество с симметричными разностями двух множеств\n",
      "None вставляет симметричные разности из этого и другого множества\n",
      "{1, 1.5, 'Bed', 'bed', 'chair', 'Sofa'} Возвращает множество, содержащее объединение множеств\n",
      "None Обновить множество другим множеством или любой другой итерабельной переменной\n",
      "{0, 1, 1.5, 2, 3, 'Bed', 4, 5, 6, 7, 8, 9, 'bed', 'chair', 'Sofa'}\n",
      "None Удаляет все элементы из множества\n",
      "set()\n"
     ]
    }
   ],
   "source": [
    "# Множество в python - \"контейнер\", содержащий не повторяющиеся элементы в случайном порядке.\n",
    "my_set = {'chair', 'table', 'sofa', 'bed', 1, 1.5, 'Sofa', 'Bed'}\n",
    "print(type(my_set))\n",
    "print(my_set.add('new_elem'), 'Добавляет элемент в набор')\n",
    "print(my_set.copy(), 'Возвращает копию множества')\n",
    "print(my_set.difference({1, 1.5}), 'Возвращает набор, содержащий разницу между двумя или более наборами')\n",
    "print(my_set.difference_update({1, 1.5}), 'Удаляет элементы из этого множества, которые также входят в другое, указанное множество')\n",
    "print(my_set.discard('table'), 'Удаляет указанный элемент')\n",
    "print(my_set.intersection({'chair'}), 'Возвращает множество, являющееся пересечением двух или более множеств')\n",
    "print(my_set.intersection_update({'chair', 'table', 'sofa', 'bed', 1, 1.5}), 'Удаляет элементы из этого множества, которые отсутствуют в других, указанных множествах')\n",
    "print(my_set.isdisjoint({'chair', 'table', 'sofa', 'bed', 1, 1.5}), 'Возвращает, имеют ли два множества пересечение или нет')\n",
    "print(my_set.issubset({'chair', 'table', 'sofa', 'bed', 1, 1.5}), 'Возвращает, содержит ли другое множество данное множество или нет')\n",
    "print(my_set.issuperset({'chair', 'table', 'sofa', 'bed', 1, 1.5}), 'Возвращает, содержит ли данное множество другое множество или нет')\n",
    "print(my_set.pop(), 'Удаляет элемент из множества')\n",
    "print(my_set)\n",
    "print(my_set.remove('bed'), 'Удаляет указанный элемент')\n",
    "print(my_set.symmetric_difference({'bed', 1, 1.5, 'Sofa', 'Bed'}), 'Возвращает множество с симметричными разностями двух множеств')\n",
    "print(my_set.symmetric_difference_update({'bed', 1, 1.5, 'Sofa', 'Bed'}), 'вставляет симметричные разности из этого и другого множества')\n",
    "print(my_set.union({'bed', 1, 1.5, 'Sofa', 'Bed'}), 'Возвращает множество, содержащее объединение множеств')\n",
    "print(my_set.update(i for i in range(10)), 'Обновить множество другим множеством или любой другой итерабельной переменной')\n",
    "print(my_set)\n",
    "print(my_set.clear(), 'Удаляет все элементы из множества')\n",
    "print(my_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "72\n",
      "4\n"
     ]
    }
   ],
   "source": [
    "# r Открывает файл для чтения. (по умолчанию)\n",
    "# w Открывает файл для записи. Создает новый файл, если он не существует, или усекает файл, если он существует.\n",
    "# x Открывает файл для эксклюзивного создания. Если файл уже существует, операция завершается неудачно.\n",
    "# a Открывает файл для добавления в конец файла без его усечения. Создает новый файл, если он не существует.\n",
    "# t Открывает в текстовом режиме. (по умолчанию)\n",
    "# b Открывает в двоичном режиме.\n",
    "# + Открывает файл для обновления (чтения и записи).\n",
    "\n",
    "# close() Закрывает файл\n",
    "# detach() Возвращает отделенный необработанный поток из буфера\n",
    "# fileno() Возвращает число, которое представляет поток с точки зрения операционной системы\n",
    "# flush() Промывает внутренний буфер\n",
    "# isatty() Возвращает, является ли поток файлов интерактивным или нет\n",
    "# read() Возвращает содержимое файла\n",
    "# readable() Возвращает, может ли файловый поток быть прочитан или нет\n",
    "# readline() Возвращает одну строку из файла\n",
    "# readlines() Возвращает список строк из файла\n",
    "# seek() Изменяет позицию файла\n",
    "# seekable() Возвращает, позволяет ли файл изменять позицию файла\n",
    "# tell() Возвращает текущую позицию файла\n",
    "# truncate() Изменяет размер файла до заданного размера\n",
    "# writable() Возвращает, можно ли записывать в файл или нет\n",
    "# write() Записывает указанную строку в файл\n",
    "# writelines() Записывает список строк в файл\n",
    "with open('writefile', 'a') as file:\n",
    "    # file.write('hello\\nhello\\nhello\\nhello')\n",
    "    print(file.fileno())\n",
    "    file.seek(4)\n",
    "    # print(file.readlines())\n",
    "    # print(file.readlines())\n",
    "    # file.seek(0)\n",
    "    # print(file.readlines())\n",
    "    print(file.tell())\n",
    "    file.flush()\n",
    "    file.truncate(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# магические методы\n",
    "# exeption\n",
    "# рекурсия\n",
    "# NUmpy\n",
    "# pytest"
   ]
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "a832bda285fd2dbb78cbe4a231033b498fc3f3a821767e1d411b7c9223965a48"
  },
  "kernelspec": {
   "display_name": "Python 3.10.2 ('venv': venv)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.2"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
